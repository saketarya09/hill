Encryption--------------------------------------------------------------------------------------------->

def encrypt_rail_fence(text, key):
    rail = [['' for _ in range(len(text))] for _ in range(key)]
    row, step = 0, 1

    for char in text:
        rail[row].append(char)
        if row == 0:
            step = 1
        elif row == key - 1:
            step = -1
        row += step

    return ''.join(''.join(row) for row in rail)

def main():
    text = input("Enter the text to encrypt: ")
    key = int(input("Enter the key: "))
    encrypted_text = encrypt_rail_fence(text, key)
    print("Encrypted text:", encrypted_text)

if __name__ == "__main__":
    main()

Encryption-------------------------------------------------------------------------------------------------------------------->

1. Initialize: Create an empty matrix called "rail" with dimensions `key x len(text)`.

2. Setup Variables: Set `row` to 0 and `step` to 1.

3. Iterate Through Text: For each character `char` in the input text:
    - Append `char` to the current row of the rail matrix.
    - If `row` is at the top or bottom edge of the rail, reverse the direction (`step`).
    - Update `row` based on the direction (`step`).

4. Concatenate Characters: Concatenate the characters row by row to form the encrypted text.

5. Return Encrypted Text: Return the concatenated text as the result.



Decrytpion------------------------------------------------------------------------------------------------------------------------------->

def decrypt_rail_fence(cipher, key):
    rail = [['' for _ in range(len(cipher))] for _ in range(key)]
    row, step = 0, 1
    for i in range(len(cipher)):
        rail[row][i] = '*'
        if row == 0:
            step = 1
        elif row == key - 1:
            step = -1
        row += step

    index = 0
    for r in range(key):
        for c in range(len(cipher)):
            if rail[r][c] == '*':
                rail[r][c] = cipher[index]
                index += 1

    result = []
    row, step = 0, 1
    for c in range(len(cipher)):
        result.append(rail[row][c])
        if row == 0:
            step = 1
        elif row == key - 1:
            step = -1
        row += step

    return ''.join(result)

def main():
    cipher = input("Enter the text to decrypt: ")
    key = int(input("Enter the key: "))
    decrypted_text = decrypt_rail_fence(cipher, key)
    print("Decrypted text:", decrypted_text)

if __name__ == "__main__":
    main()


Decrytpion------------------------------------------------------------------------------------------------------------------------------->
1. Initialize: Create an empty matrix called "rail" with dimensions `key x len(cipher)`.

2. Setup Variables: Set `row` to 0 and `step` to 1.

3. Mark Positions: Mark the positions in the rail matrix where characters should be placed by iterating through each position in the matrix:
    - Place a marker ('*') at position `[row][i]`.
    - If `row` is at the top or bottom edge of the rail, reverse the direction (`step`).
    - Update `row` based on the direction (`step`).

4. Fill the Matrix: Fill the rail matrix with characters from the cipher in the same zigzag pattern used during encryption.

5. Reconstruct Original Text: Reconstruct the original text by reading characters in the zigzag pattern, starting from the rail matrix.

6. Return Decrypted Text: Return the reconstructed text as the result.

These step-by-step pseudocodes outline the process of both encrypting and decrypting text using the Rail Fence Cipher algorithm.
