Encryption--------------------------------------------------------------------------------------------->

def encrypt():
    text = input("Enter a message to encrypt: ")
    key = input("Enter the key (number): ")
    
    try:
        key = int(key)
    except ValueError:
        return "Error: The key must be a number."

    encrypted_message = ""
    for ch in text:
        if ch.isalnum():  # Check if character is alphanumeric
            if ch.islower():
                ch = chr((ord(ch) - ord('a') + key) % 26 + ord('a'))
            elif ch.isupper():
                ch = chr((ord(ch) - ord('A') + key) % 26 + ord('A'))
            elif ch.isdigit():
                ch = chr((ord(ch) - ord('0') + key) % 10 + ord('0'))
        else:
            return "Error: Invalid character in message. Use only alphanumeric characters."
        encrypted_message += ch

    return f"Encrypted message: {encrypted_message}"

print(encrypt())



Encryption-------------------------------------------------------------------------------------------------------------------->

Function Encrypt
    Input: None
    Output: Encrypted message or error message

    Steps:
    1. Prompt the user "Enter a message to encrypt:"
    2. Read the input message into variable 'text'
    3. Prompt the user "Enter the key (number):"
    4. Read the input key into variable 'key'
    5. Try to convert 'key' to an integer
        If conversion fails, return "Error: The key must be a number."
    6. Initialize 'encrypted_message' to an empty string
    7. For each character 'ch' in 'text'
        a. If 'ch' is a lowercase letter
            i. Convert 'ch' using the formula (ord(ch) - ord('a') + key) % 26 + ord('a')
            ii. Convert the result back to a character and append to 'encrypted_message'
        b. Else if 'ch' is an uppercase letter
            i. Convert 'ch' using the formula (ord(ch) - ord('A') + key) % 26 + ord('A')
            ii. Convert the result back to a character and append to 'encrypted_message'
        c. Else if 'ch' is a digit
            i. Convert 'ch' using the formula (ord(ch) - ord('0') + key) % 10 + ord('0')
            ii. Convert the result back to a character and append to 'encrypted_message'
        d. Else
            return "Error: Invalid character in message. Use only alphanumeric characters."
    8. Return "Encrypted message: " concatenated with 'encrypted_message'

End Function




Decrytpion------------------------------------------------------------------------------------------------------------------------------->
def decrypt():
    text = input("Enter a message to decrypt: ")
    key = input("Enter the key (number): ")
    
    try:
        key = int(key)
    except ValueError:
        return "Error: The key must be a number."

    decrypted_message = ""
    for ch in text:
        if ch.isalnum():  # Check if character is alphanumeric
            if ch.islower():
                ch = chr((ord(ch) - ord('a') - key + 26) % 26 + ord('a'))
            elif ch.isupper():
                ch = chr((ord(ch) - ord('A') - key + 26) % 26 + ord('A'))
            elif ch.isdigit():
                ch = chr((ord(ch) - ord('0') - key + 10) % 10 + ord('0'))
        else:
            return "Error: Invalid character in message. Use only alphanumeric characters."
        decrypted_message += ch

    return f"Decrypted message: {decrypted_message}"

print(decrypt())


Decrytpion------------------------------------------------------------------------------------------------------------------------------->
Function Decrypt
    Input: None
    Output: Decrypted message or error message

    Steps:
    1. Prompt the user "Enter a message to decrypt:"
    2. Read the input message into variable 'text'
    3. Prompt the user "Enter the key (number):"
    4. Read the input key into variable 'key'
    5. Try to convert 'key' to an integer
        If conversion fails, return "Error: The key must be a number."
    6. Initialize 'decrypted_message' to an empty string
    7. For each character 'ch' in 'text'
        a. If 'ch' is a lowercase letter
            i. Convert 'ch' using the formula (ord(ch) - ord('a') - key + 26) % 26 + ord('a')
            ii. Convert the result back to a character and append to 'decrypted_message'
        b. Else if 'ch' is an uppercase letter
            i. Convert 'ch' using the formula (ord(ch) - ord('A') - key + 26) % 26 + ord('A')
            ii. Convert the result back to a character and append to 'decrypted_message'
        c. Else if 'ch' is a digit
            i. Convert 'ch' using the formula (ord(ch) - ord('0') - key + 10) % 10 + ord('0')
            ii. Convert the result back to a character and append to 'decrypted_message'
        d. Else
            return "Error: Invalid character in message. Use only alphanumeric characters."
    8. Return "Decrypted message: " concatenated with 'decrypted_message'

